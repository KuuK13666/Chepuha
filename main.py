# main.py
# ‚Ññ1: –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞ –Ω–∞ aiogram v3.
# ‚Ññ2: –°–µ–π—á–∞—Å –Ω–∞—à–∞ —Ü–µ–ª—å ‚Äî –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –ø—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ /start.
# ‚Ññ3: –õ–æ–≥–∏–∫—É –¥–∏–∞–ª–æ–≥–∞/–∞—É–¥–∏–æ –¥–æ–±–∞–≤–∏–º —à–∞–≥–æ–º ‚Ññ2 (–∫–æ–≥–¥–∞ —Å–∫–∞–∂–µ—à—å "–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º").

import asyncio
import logging
from os import getenv

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message

from config import BOT_TOKEN
from database import init_db, upsert_user

# ‚Ññ4: –ë–∞–∑–æ–≤—ã–π –ª–æ–≥ ‚Äî –ø–æ–ª–µ–∑–Ω–æ –≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
logging.basicConfig(level=logging.INFO)

# ‚Ññ5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (–µ–≥–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç config.py –∏–∑ .env)
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env. –ó–∞–ø–æ–ª–Ω–∏ —Ñ–∞–π–ª .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏.")

# ‚Ññ6: –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """
    ‚Ññ7: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start.
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (upsert –ø–æ tg_id).
    - –û—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: None.
    """
    tg_id = message.from_user.id                        # ‚Ññ8: —Ç–µ–ª–µ–≥—Ä–∞–º–Ω—ã–π ID
    name = message.from_user.full_name                  # ‚Ññ9: –∏–º—è / –§–ò–û –∏–∑ Telegram
    username = message.from_user.username               # ‚Ññ10: @username –∏–ª–∏ None

    # ‚Ññ11: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = await upsert_user(tg_id=tg_id, name=name, username=username)

    # ‚Ññ12: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {name}!\n"
        f"–¢–≤–æ—è –∑–∞–ø–∏—Å—å –≤ –ë–î –µ—Å—Ç—å (user_id={user_id}).\n"
        f"–ë–æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ aiogram + SQLite.\n"
        f"–ì–æ—Ç–æ–≤ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ, –∫–æ–≥–¥–∞ —Å–∫–∞–∂–µ—à—å üôÇ"
    )

async def on_startup() -> None:
    """
    ‚Ññ13: –•—É–∫ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î (—Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ—Ç).
    """
    await init_db()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

async def main() -> None:
    """
    ‚Ññ14: –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞:
    - on_startup()
    - –∑–∞–ø—É—Å–∫ long polling.
    """
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    # ‚Ññ15: –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π main
    asyncio.run(main())
